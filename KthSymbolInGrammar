class Solution {
public:
    int kthGrammar(int n, int k) {
        if(n==1 && k==1) return 0;
        int mid=pow(2,n-1)/2;
        if(k<=mid) return kthGrammar(n-1,k);
        return !kthGrammar(n-1,k-mid);
    }
};

// The main trick to solve this question is observation.
// See we can easily realise that this is done with recursion, 
// But while applying the same, hare comes the hurdle, how to apply IBH rule?
// We can observe that in each step the lenght is doubling, and also the first half of any row is 
// complement of the 2nd half.